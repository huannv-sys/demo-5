#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
MikroTik Monitor - ·ª®ng d·ª•ng gi√°m s√°t thi·∫øt b·ªã MikroTik
ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi Replit AI
Ch·∫°y ·ª©ng d·ª•ng: streamlit run app.py
"""

import streamlit as st
import json
import os
import subprocess
import time
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime
from dotenv import load_dotenv

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="MikroTik Monitor",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üîÑ MikroTik Monitor")
st.markdown("### H·ªá th·ªëng gi√°m s√°t thi·∫øt b·ªã MikroTik")

# Sidebar
with st.sidebar:
    st.header("ƒêi·ªÅu h∆∞·ªõng")
    page = st.radio(
        "Ch·ªçn trang:",
        ["Dashboard", "C·∫•u h√¨nh k·∫øt n·ªëi", "Th·ªëng k√™ m·∫°ng", "Logs", "C·∫•u h√¨nh th√¥ng b√°o"]
    )
    
    st.header("Th√¥ng tin")
    st.info("""
        ·ª®ng d·ª•ng gi√°m s√°t RouterOS d√†nh cho thi·∫øt b·ªã MikroTik.
        
        Phi√™n b·∫£n: 1.0.0
        
        ¬© 2025 MikroTik Monitor
    """)

# C·∫•u h√¨nh API URL (ƒë·∫£m b·∫£o c√≥ th·ªÉ truy c·∫≠p tr√™n c√πng host)
API_BASE_URL = "http://127.0.0.1:3000/api"

# H√†m l·∫•y th√¥ng tin router t·ª´ API
def get_router_info():
    try:
        import requests
        
        # Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
        response = requests.get(f"{API_BASE_URL}/test-mikrotik-connection", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                router_info = data.get("routerInfo", {})
                
                # L·∫•y th√¥ng tin t√†i nguy√™n
                resources_response = requests.get(f"{API_BASE_URL}/connections/1/resources", timeout=10)
                resources = {}
                
                if resources_response.status_code == 200:
                    resources = resources_response.json()
                
                # ƒê·ªãnh d·∫°ng th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã
                memory_used = int(resources.get("totalMemory", 0) - resources.get("freeMemory", 0))
                total_memory = int(resources.get("totalMemory", 0))
                memory_percent = 0
                if total_memory > 0:
                    memory_percent = (memory_used / total_memory) * 100
                
                storage_used = int(resources.get("totalHdd", 0) - resources.get("freeHdd", 0))
                total_storage = int(resources.get("totalHdd", 0))
                storage_percent = 0
                if total_storage > 0:
                    storage_percent = (storage_used / total_storage) * 100
                
                # ƒê·ªãnh d·∫°ng ƒë∆°n v·ªã ƒë·ªÉ hi·ªÉn th·ªã
                memory_used_mb = memory_used / (1024 * 1024)
                total_memory_mb = total_memory / (1024 * 1024)
                storage_used_mb = storage_used / (1024 * 1024)
                total_storage_mb = total_storage / (1024 * 1024)
                
                return {
                    "name": f"MikroTik {router_info.get('platform', 'Router')}",
                    "model": router_info.get('board', 'Unknown'),
                    "version": router_info.get('version', 'Unknown'),
                    "uptime": router_info.get('uptime', 'Unknown'),
                    "cpu_load": f"{resources.get('cpuLoad', '0')}%",
                    "memory_used": f"{memory_used_mb:.0f} MB / {total_memory_mb:.0f} MB",
                    "memory_percent": memory_percent,
                    "storage_used": f"{storage_used_mb:.0f} MB / {total_storage_mb:.0f} MB",
                    "storage_percent": storage_percent,
                    "connected": True,
                    "last_connected": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
            else:
                return {
                    "name": "MikroTik Router",
                    "model": "Unknown",
                    "version": "Unknown",
                    "uptime": "Unknown",
                    "cpu_load": "0%",
                    "memory_used": "0 MB / 0 MB",
                    "memory_percent": 0,
                    "storage_used": "0 MB / 0 MB",
                    "storage_percent": 0,
                    "connected": False,
                    "last_connected": "Never connected"
                }
        else:
            st.error(f"L·ªói k·∫øt n·ªëi API: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y th√¥ng tin router: {e}")
        return None

# H√†m l·∫•y th√¥ng tin interface t·ª´ API
def get_interfaces():
    try:
        import requests
        
        # G·ªçi API l·∫•y danh s√°ch interfaces
        response = requests.get(f"{API_BASE_URL}/connections/1/interfaces", timeout=10)
        
        # G·ªçi API l·∫•y th·ªëng k√™ interfaces
        stats_response = requests.get(f"{API_BASE_URL}/connections/1/interface-stats", timeout=10)
        
        stats_data = []
        if stats_response.status_code == 200:
            stats_data = stats_response.json()
        
        if response.status_code == 200:
            interfaces_data = response.json()
            
            # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API sang ƒë·ªãnh d·∫°ng hi·ªÉn th·ªã
            interfaces = []
            for iface in interfaces_data:
                # T√¨m ki·∫øm th√¥ng tin th·ªëng k√™ cho interface hi·ªán t·∫°i
                stat = next((s for s in stats_data if s.get("name") == iface.get("name")), {})
                
                # L·∫•y d·ªØ li·ªáu rx/tx t·ª´ th·ªëng k√™
                rx = stat.get("rxBytes", 0)
                tx = stat.get("txBytes", 0)
                
                interfaces.append({
                    "name": iface.get("name", ""),
                    "type": iface.get("type", "unknown"),
                    "status": "up" if iface.get("running", False) else "down",
                    "rx": rx,
                    "tx": tx,
                    "disabled": iface.get("disabled", False),
                    "mac_address": iface.get("macAddress", "")
                })
            
            return interfaces
        else:
            st.warning(f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin interfaces: {response.status_code}")
            return []
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y danh s√°ch interface: {e}")
        return []

# H√†m l·∫•y th√¥ng tin log t·ª´ API
def get_logs(limit=50):
    try:
        import requests
        
        # G·ªçi API l·∫•y logs
        response = requests.get(f"{API_BASE_URL}/connections/1/logs?limit={limit}", timeout=10)
        
        if response.status_code == 200:
            logs_data = response.json()
            return logs_data
        else:
            st.warning(f"Kh√¥ng th·ªÉ l·∫•y log t·ª´ router: {response.status_code}")
            # Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi
            return [
                {"time": "2025-03-26 09:15:32", "topics": "system,info", "message": "System started"},
                {"time": "2025-03-26 09:15:48", "topics": "wireless,info", "message": "wlan1 connected"},
                {"time": "2025-03-26 09:22:15", "topics": "firewall,warning", "message": "Blocked connection from 192.168.1.254"},
                {"time": "2025-03-26 10:35:17", "topics": "system,error", "message": "CPU overload detected"},
                {"time": "2025-03-26 11:12:03", "topics": "dhcp,info", "message": "DHCP lease for 192.168.1.100 expired"}
            ]
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y logs: {e}")
        return []

# H√†m l·∫•y c·∫•u h√¨nh th√¥ng b√°o
def get_notification_config():
    try:
        if os.path.exists("config/notification_config.json"):
            with open("config/notification_config.json", "r") as f:
                return json.load(f)
        return {
            "enabled": False,
            "channels": {
                "email": {"enabled": False, "recipients": []},
                "sms": {"enabled": False, "recipients": []}
            }
        }
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc c·∫•u h√¨nh th√¥ng b√°o: {e}")
        return None

# Dashboard
if page == "Dashboard":
    st.header("Dashboard")
    
    router_info = get_router_info()
    
    if router_info:
        # Hi·ªÉn th·ªã tr·∫°ng th√°i k·∫øt n·ªëi
        if router_info["connected"]:
            st.success("‚úÖ Connected to MikroTik Router")
        else:
            st.error("‚ùå Not connected to MikroTik Router")
        
        # Th√¥ng tin router
        col1, col2, col3 = st.columns(3)
        with col1:
            st.subheader("Th√¥ng tin thi·∫øt b·ªã")
            st.info(f"""
                **T√™n:** {router_info["name"]}  
                **Model:** {router_info["model"]}  
                **Phi√™n b·∫£n:** {router_info["version"]}  
                **Uptime:** {router_info["uptime"]}
            """)

        with col2:
            st.subheader("T√†i nguy√™n CPU/RAM")
            st.info(f"""
                **CPU Load:** {router_info["cpu_load"]}  
                **Memory:** {router_info["memory_used"]}
            """)
            st.progress(router_info["memory_percent"] / 100)

        with col3:
            st.subheader("L∆∞u tr·ªØ")
            st.info(f"""
                **Storage:** {router_info["storage_used"]}
            """)
            st.progress(router_info["storage_percent"] / 100)
        
        # Th√¥ng tin interfaces
        st.subheader("Network Interfaces")
        interfaces = get_interfaces()
        
        if interfaces:
            # T·∫°o DataFrame
            df = pd.DataFrame(interfaces)
            
            # ƒê·ªãnh d·∫°ng gi√° tr·ªã
            df["rx_formatted"] = df["rx"].apply(lambda x: f"{x/1000000:.2f} MB")
            df["tx_formatted"] = df["tx"].apply(lambda x: f"{x/1000000:.2f} MB")
            df["status_display"] = df.apply(lambda row: "üü¢ Up" if row["status"] == "up" else "üî¥ Down", axis=1)
            
            # Hi·ªÉn th·ªã b·∫£ng
            st.dataframe(
                df[["name", "type", "status_display", "rx_formatted", "tx_formatted"]],
                column_config={
                    "name": "Interface",
                    "type": "Type",
                    "status_display": "Status",
                    "rx_formatted": "Download",
                    "tx_formatted": "Upload"
                },
                use_container_width=True
            )
            
            # Bi·ªÉu ƒë·ªì bƒÉng th√¥ng
            st.subheader("Bandwidth Usage")
            
            fig = go.Figure()
            
            fig.add_trace(go.Bar(
                x=df["name"],
                y=df["rx"],
                name="Download (bytes)",
                marker_color="blue"
            ))
            
            fig.add_trace(go.Bar(
                x=df["name"],
                y=df["tx"],
                name="Upload (bytes)",
                marker_color="green"
            ))
            
            fig.update_layout(
                barmode="group",
                xaxis_title="Interface",
                yaxis_title="Bandwidth (bytes)",
                legend_title="Direction",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)

# C·∫•u h√¨nh k·∫øt n·ªëi
elif page == "C·∫•u h√¨nh k·∫øt n·ªëi":
    st.header("C·∫•u h√¨nh k·∫øt n·ªëi")
    
    with st.form("connection_form"):
        st.write("Thi·∫øt l·∫≠p k·∫øt n·ªëi ƒë·∫øn thi·∫øt b·ªã MikroTik")
        
        col1, col2 = st.columns(2)
        
        with col1:
            name = st.text_input("T√™n k·∫øt n·ªëi", "MikroTik Router")
            address = st.text_input("ƒê·ªãa ch·ªâ IP", "192.168.1.1")
        
        with col2:
            port = st.number_input("Port API", value=8728, min_value=1, max_value=65535)
            is_default = st.checkbox("ƒê·∫∑t l√†m k·∫øt n·ªëi m·∫∑c ƒë·ªãnh", value=True)
        
        username = st.text_input("T√™n ƒëƒÉng nh·∫≠p")
        password = st.text_input("M·∫≠t kh·∫©u", type="password")
        
        submit = st.form_submit_button("L∆∞u k·∫øt n·ªëi")
        
        if submit:
            if not username or not password or not address:
                st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin k·∫øt n·ªëi")
            else:
                st.success(f"ƒê√£ l∆∞u k·∫øt n·ªëi ƒë·∫øn {address}:{port} v·ªõi t√™n {name}")

# Th·ªëng k√™ m·∫°ng
elif page == "Th·ªëng k√™ m·∫°ng":
    st.header("Th·ªëng k√™ m·∫°ng")
    
    # T·∫°o tabs
    tab1, tab2, tab3 = st.tabs(["BƒÉng th√¥ng", "DHCP Leases", "Wireless"])
    
    with tab1:
        st.subheader("Bi·ªÉu ƒë·ªì s·ª≠ d·ª•ng bƒÉng th√¥ng")
        
        # M√¥ ph·ªèng d·ªØ li·ªáu
        time_points = [f"2023-03-26 {hour}:00" for hour in range(24)]
        download = [5, 7, 4, 2, 1, 0.5, 0.7, 3, 8, 12, 18, 15, 14, 16, 18, 22, 25, 28, 35, 32, 24, 18, 10, 7]
        upload = [2, 1, 0.8, 0.5, 0.2, 0.1, 0.3, 1, 4, 6, 8, 7, 6, 7, 8, 10, 12, 13, 15, 14, 10, 8, 5, 3]
        
        # T·∫°o DataFrame
        data = pd.DataFrame({
            "time": time_points,
            "download": download,
            "upload": upload
        })
        
        # V·∫Ω bi·ªÉu ƒë·ªì
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=data["time"],
            y=data["download"],
            mode="lines",
            name="Download (Mbps)",
            line=dict(color="blue", width=2)
        ))
        
        fig.add_trace(go.Scatter(
            x=data["time"],
            y=data["upload"],
            mode="lines",
            name="Upload (Mbps)",
            line=dict(color="green", width=2)
        ))
        
        fig.update_layout(
            title="Bandwidth Usage (Last 24 Hours)",
            xaxis_title="Time",
            yaxis_title="Bandwidth (Mbps)",
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        st.subheader("DHCP Leases")
        
        # L·∫•y d·ªØ li·ªáu DHCP t·ª´ API
        try:
            import requests
            
            response = requests.get(f"{API_BASE_URL}/connections/1/dhcp", timeout=10)
            
            if response.status_code == 200:
                dhcp_data = response.json()
                leases_data = dhcp_data.get("leases", [])
                
                if leases_data:
                    # T·∫°o DataFrame v√† hi·ªÉn th·ªã
                    df_leases = pd.DataFrame(leases_data)
                    
                    # ƒê·ªãnh d·∫°ng c√°c c·ªôt ƒë·ªÉ hi·ªÉn th·ªã
                    display_columns = ["address", "macAddress", "hostname", "expires", "status"]
                    display_cols = [col for col in display_columns if col in df_leases.columns]
                    
                    column_config = {
                        "address": "IP Address",
                        "macAddress": "MAC Address",
                        "hostname": "Hostname",
                        "expires": "Expires In",
                        "status": "Status"
                    }
                    
                    st.dataframe(
                        df_leases[display_cols], 
                        column_config={k: v for k, v in column_config.items() if k in display_cols},
                        use_container_width=True
                    )
                else:
                    st.info("Kh√¥ng c√≥ DHCP lease n√†o ƒë∆∞·ª£c t√¨m th·∫•y.")
            else:
                # Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ API
                leases = [
                    {"address": "192.168.1.100", "macAddress": "00:11:22:33:44:55", "hostname": "laptop-user1", "expires": "12h 30m"},
                    {"address": "192.168.1.101", "macAddress": "AA:BB:CC:DD:EE:FF", "hostname": "android-phone", "expires": "23h 15m"},
                    {"address": "192.168.1.102", "macAddress": "11:22:33:44:55:66", "hostname": "smart-tv", "expires": "35h 45m"},
                    {"address": "192.168.1.103", "macAddress": "AA:11:BB:22:CC:33", "hostname": "desktop-pc", "expires": "6h 20m"},
                    {"address": "192.168.1.104", "macAddress": "FF:EE:DD:CC:BB:AA", "hostname": "printer", "expires": "48h 0m"}
                ]
                df_leases = pd.DataFrame(leases)
                st.warning("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu DHCP t·ª´ router. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.")
                st.dataframe(df_leases, use_container_width=True)
        except Exception as e:
            st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu DHCP: {e}")
            # Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u khi c√≥ l·ªói
            leases = [
                {"address": "192.168.1.100", "macAddress": "00:11:22:33:44:55", "hostname": "laptop-user1", "expires": "12h 30m"},
                {"address": "192.168.1.101", "macAddress": "AA:BB:CC:DD:EE:FF", "hostname": "android-phone", "expires": "23h 15m"}
            ]
            df_leases = pd.DataFrame(leases)
            st.dataframe(df_leases, use_container_width=True)
    
    with tab3:
        st.subheader("Wireless Networks")
        
        # L·∫•y d·ªØ li·ªáu Wireless t·ª´ API
        try:
            import requests
            
            response = requests.get(f"{API_BASE_URL}/connections/1/wireless", timeout=10)
            
            if response.status_code == 200:
                wireless_data = response.json()
                interfaces = wireless_data.get("interfaces", [])
                clients = wireless_data.get("clients", [])
                
                if interfaces:
                    # T·∫°o DataFrame cho interfaces
                    df_wireless = pd.DataFrame(interfaces)
                    
                    # ƒê·ªãnh d·∫°ng ƒë·ªÉ hi·ªÉn th·ªã
                    display_columns = ["name", "ssid", "band", "frequency", "channelWidth", "mode", "disabled"]
                    display_cols = [col for col in display_columns if col in df_wireless.columns]
                    
                    column_config = {
                        "name": "Interface",
                        "ssid": "SSID",
                        "band": "Band",
                        "frequency": "Frequency",
                        "channelWidth": "Channel Width",
                        "mode": "Mode",
                        "disabled": "Disabled"
                    }
                    
                    st.dataframe(
                        df_wireless[display_cols], 
                        column_config={k: v for k, v in column_config.items() if k in display_cols},
                        use_container_width=True
                    )
                else:
                    st.info("Kh√¥ng t√¨m th·∫•y wireless interface n√†o.")
                
                # Danh s√°ch client
                st.subheader("Wireless Clients")
                
                if clients:
                    # T·∫°o DataFrame cho clients
                    df_clients = pd.DataFrame(clients)
                    
                    # ƒê·ªãnh d·∫°ng ƒë·ªÉ hi·ªÉn th·ªã
                    display_columns = ["interface", "macAddress", "signalStrength", "txRate", "rxRate", "uptime"]
                    display_cols = [col for col in display_columns if col in df_clients.columns]
                    
                    column_config = {
                        "interface": "Interface",
                        "macAddress": "MAC Address",
                        "signalStrength": "Signal Strength",
                        "txRate": "TX Rate",
                        "rxRate": "RX Rate",
                        "uptime": "Uptime"
                    }
                    
                    st.dataframe(
                        df_clients[display_cols], 
                        column_config={k: v for k, v in column_config.items() if k in display_cols},
                        use_container_width=True
                    )
                else:
                    st.info("Kh√¥ng c√≥ client n√†o ƒëang k·∫øt n·ªëi.")
            else:
                # Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ API
                st.warning("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu wireless t·ª´ router. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.")
                wireless = [
                    {"name": "Home-Network", "band": "2.4GHz", "channel": "6", "clients": 8, "security": "WPA2-PSK"},
                    {"name": "Office-5G", "band": "5GHz", "channel": "36", "clients": 3, "security": "WPA3"}
                ]
                df_wireless = pd.DataFrame(wireless)
                st.dataframe(df_wireless, use_container_width=True)
                
                # Danh s√°ch client m·∫´u
                st.subheader("Wireless Clients")
                clients = [
                    {"mac": "00:11:22:33:44:55", "network": "Home-Network", "signal": -65, "tx_rate": "54 Mbps", "rx_rate": "54 Mbps"},
                    {"mac": "AA:BB:CC:DD:EE:FF", "network": "Home-Network", "signal": -72, "tx_rate": "36 Mbps", "rx_rate": "36 Mbps"},
                    {"mac": "11:22:33:44:55:66", "network": "Office-5G", "signal": -58, "tx_rate": "180 Mbps", "rx_rate": "180 Mbps"}
                ]
                df_clients = pd.DataFrame(clients)
                st.dataframe(df_clients, use_container_width=True)
        except Exception as e:
            st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu wireless: {e}")
            # Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u khi c√≥ l·ªói
            wireless = [
                {"name": "Home-Network", "band": "2.4GHz", "channel": "6", "clients": 8, "security": "WPA2-PSK"}
            ]
            df_wireless = pd.DataFrame(wireless)
            st.dataframe(df_wireless, use_container_width=True)

# Logs
elif page == "Logs":
    st.header("System Logs")
    
    # Filter options
    col1, col2, col3 = st.columns(3)
    
    with col1:
        topics_filter = st.multiselect(
            "L·ªçc theo Topics:",
            ["system", "wireless", "firewall", "dhcp", "info", "warning", "error"]
        )
    
    with col2:
        search_term = st.text_input("T√¨m ki·∫øm:", "")
    
    with col3:
        limit = st.slider("S·ªë l∆∞·ª£ng logs:", min_value=10, max_value=100, value=50, step=10)
    
    # Get logs
    logs = get_logs(limit)
    
    if logs:
        # Apply filters
        filtered_logs = logs
        
        if topics_filter:
            filtered_logs = [
                log for log in filtered_logs 
                if any(topic in log["topics"] for topic in topics_filter)
            ]
        
        if search_term:
            filtered_logs = [
                log for log in filtered_logs 
                if search_term.lower() in log["message"].lower()
            ]
        
        # Create DataFrame
        df_logs = pd.DataFrame(filtered_logs)
        
        # Add color coding for log levels
        def get_log_color(topics):
            if "error" in topics:
                return "background-color: #ffcccc"
            elif "warning" in topics:
                return "background-color: #fff2cc"
            else:
                return ""
        
        # Apply styling
        styled_df = df_logs.style.applymap(
            lambda x: get_log_color(x) if isinstance(x, str) and ("error" in x or "warning" in x) else "",
            subset=["topics"]
        )
        
        # Display logs
        st.dataframe(styled_df, use_container_width=True)
        
        # Download button
        csv = df_logs.to_csv(index=False)
        st.download_button(
            label="Download Logs as CSV",
            data=csv,
            file_name="mikrotik_logs.csv",
            mime="text/csv"
        )
    else:
        st.warning("Kh√¥ng c√≥ logs n√†o ƒë∆∞·ª£c t√¨m th·∫•y ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn router.")

# C·∫•u h√¨nh th√¥ng b√°o
elif page == "C·∫•u h√¨nh th√¥ng b√°o":
    st.header("C·∫•u h√¨nh th√¥ng b√°o")
    
    notification_config = get_notification_config()
    
    if notification_config:
        # Enable/disable notifications globally
        enabled = st.toggle("B·∫≠t th√¥ng b√°o", notification_config["enabled"])
        
        # Channel configuration
        st.subheader("K√™nh th√¥ng b√°o")
        
        tab1, tab2 = st.tabs(["Email", "SMS"])
        
        with tab1:
            st.subheader("C·∫•u h√¨nh th√¥ng b√°o qua Email")
            
            email_enabled = st.toggle(
                "B·∫≠t th√¥ng b√°o qua Email", 
                notification_config["channels"]["email"]["enabled"]
            )
            
            st.subheader("Danh s√°ch ng∆∞·ªùi nh·∫≠n Email")
            
            email_recipients = notification_config["channels"]["email"]["recipients"]
            
            if email_recipients:
                for email in email_recipients:
                    st.text(email)
            else:
                st.info("Ch∆∞a c√≥ ng∆∞·ªùi nh·∫≠n email n√†o ƒë∆∞·ª£c c·∫•u h√¨nh")
            
            with st.form("add_email_form"):
                new_email = st.text_input("Email:")
                submit_email = st.form_submit_button("Th√™m Email")
                
                if submit_email and new_email:
                    if "@" in new_email and "." in new_email:
                        st.success(f"ƒê√£ th√™m email: {new_email}")
                    else:
                        st.error("Email kh√¥ng h·ª£p l·ªá")
            
            # Test email
            with st.form("test_email_form"):
                test_email = st.text_input("G·ª≠i email th·ª≠ nghi·ªám ƒë·∫øn:")
                submit_test = st.form_submit_button("G·ª≠i th·ª≠ nghi·ªám")
                
                if submit_test and test_email:
                    with st.spinner("ƒêang g·ª≠i email th·ª≠ nghi·ªám..."):
                        time.sleep(2)  # Simulate sending
                        st.success(f"ƒê√£ g·ª≠i email th·ª≠ nghi·ªám ƒë·∫øn {test_email}")
        
        with tab2:
            st.subheader("C·∫•u h√¨nh th√¥ng b√°o qua SMS")
            
            sms_enabled = st.toggle(
                "B·∫≠t th√¥ng b√°o qua SMS", 
                notification_config["channels"]["sms"]["enabled"]
            )
            
            st.subheader("Danh s√°ch s·ªë ƒëi·ªán tho·∫°i nh·∫≠n SMS")
            
            sms_recipients = notification_config["channels"]["sms"]["recipients"]
            
            if sms_recipients:
                for phone in sms_recipients:
                    st.text(phone)
            else:
                st.info("Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i n√†o ƒë∆∞·ª£c c·∫•u h√¨nh")
            
            with st.form("add_phone_form"):
                new_phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i (ƒë·ªãnh d·∫°ng +84xxx):")
                submit_phone = st.form_submit_button("Th√™m s·ªë ƒëi·ªán tho·∫°i")
                
                if submit_phone and new_phone:
                    if new_phone.startswith("+") and len(new_phone) > 8:
                        st.success(f"ƒê√£ th√™m s·ªë ƒëi·ªán tho·∫°i: {new_phone}")
                    else:
                        st.error("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
            
            # Test SMS
            with st.form("test_sms_form"):
                test_phone = st.text_input("G·ª≠i SMS th·ª≠ nghi·ªám ƒë·∫øn (ƒë·ªãnh d·∫°ng +84xxx):")
                submit_test_sms = st.form_submit_button("G·ª≠i th·ª≠ nghi·ªám")
                
                if submit_test_sms and test_phone:
                    with st.spinner("ƒêang g·ª≠i SMS th·ª≠ nghi·ªám..."):
                        time.sleep(2)  # Simulate sending
                        st.success(f"ƒê√£ g·ª≠i SMS th·ª≠ nghi·ªám ƒë·∫øn {test_phone}")
        
        # Alert configuration
        st.subheader("C·∫•u h√¨nh c·∫£nh b√°o")
        
        alerts = [
            {"id": "connection_lost", "name": "M·∫•t k·∫øt n·ªëi", "default_channels": ["email", "sms"]},
            {"id": "high_cpu", "name": "CPU cao", "default_channels": ["email"]},
            {"id": "high_memory", "name": "B·ªô nh·ªõ cao", "default_channels": ["email"]},
            {"id": "interface_down", "name": "Interface ng·ª´ng ho·∫°t ƒë·ªông", "default_channels": ["email", "sms"]}
        ]
        
        for alert in alerts:
            expander = st.expander(f"C·∫£nh b√°o: {alert['name']}")
            with expander:
                st.checkbox(
                    f"B·∫≠t c·∫£nh b√°o {alert['name']}", 
                    value=notification_config["alerts"].get(alert["id"], {}).get("enabled", True)
                )
                
                st.multiselect(
                    "K√™nh th√¥ng b√°o:",
                    ["email", "sms"],
                    default=alert["default_channels"]
                )
                
                if alert["id"] in ["high_cpu", "high_memory"]:
                    st.slider(
                        "Ng∆∞·ª°ng (%)", 
                        min_value=50, 
                        max_value=95, 
                        value=80
                    )
                
                st.number_input(
                    "Th·ªùi gian ch·ªù gi·ªØa c√°c c·∫£nh b√°o (gi√¢y)", 
                    min_value=60, 
                    value=300
                )
        
        # Save changes button
        if st.button("L∆∞u thay ƒë·ªïi"):
            st.success("ƒê√£ l∆∞u c·∫•u h√¨nh th√¥ng b√°o th√†nh c√¥ng!")
    else:
        st.error("Kh√¥ng th·ªÉ ƒë·ªçc c·∫•u h√¨nh th√¥ng b√°o.")