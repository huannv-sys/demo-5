#!/usr/bin/env node

/**
 * Script ƒë·ªÉ gi√°m s√°t bƒÉng th√¥ng t·ª´ thi·∫øt b·ªã MikroTik
 * S·ª≠ d·ª•ng: node test-bandwidth.mjs <ƒë·ªãa_ch·ªâ_ip> <t√™n_ƒëƒÉng_nh·∫≠p> <m·∫≠t_kh·∫©u> [<c·ªïng>]
 */

import { RouterOSAPI } from 'routeros-client';

// L·∫•y tham s·ªë t·ª´ d√≤ng l·ªánh
const args = process.argv.slice(2);
if (args.length < 3) {
  console.error('Thi·∫øu tham s·ªë. S·ª≠ d·ª•ng: node test-bandwidth.mjs <ƒë·ªãa_ch·ªâ_ip> <t√™n_ƒëƒÉng_nh·∫≠p> <m·∫≠t_kh·∫©u> [<c·ªïng>]');
  process.exit(1);
}

const host = args[0];
const username = args[1];
const password = args[2];
const port = args[3] ? parseInt(args[3]) : 8728;

/**
 * In ti√™u ƒë·ªÅ ph·∫ßn
 */
function printSection(title) {
  console.log(`\n${'='.repeat(60)}`);
  console.log(`üìä ${title.toUpperCase()}`);
  console.log(`${'='.repeat(60)}\n`);
}

/**
 * ƒê·ªãnh d·∫°ng bytes th√†nh ƒë∆°n v·ªã ƒë·ªçc ƒë∆∞·ª£c (KB, MB, GB, etc)
 */
function formatBytes(bytes, decimals = 2) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
  
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

/**
 * ƒê·ªãnh d·∫°ng bitrate
 */
function formatBitrate(bits, decimals = 2) {
  if (bits === 0) return '0 bps';
  
  const k = 1000; // S·ª≠ d·ª•ng 1000 cho bit rates, kh√¥ng ph·∫£i 1024
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['bps', 'Kbps', 'Mbps', 'Gbps', 'Tbps'];
  
  const i = Math.floor(Math.log(bits) / Math.log(k));
  
  return parseFloat((bits / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

/**
 * T·∫°o bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n t·ª´ d·ªØ li·ªáu hi·ªán t·∫°i
 */
function createGraph(value, max, width = 50) {
  const percent = Math.min(100, (value / max) * 100);
  const bars = Math.floor((percent / 100) * width);
  
  let graph = '';
  for (let i = 0; i < width; i++) {
    graph += i < bars ? '‚ñà' : '‚ñë';
  }
  
  return `${graph} ${percent.toFixed(1)}%`;
}

/**
 * H√†m ch√≠nh ƒë·ªÉ ki·ªÉm tra bƒÉng th√¥ng
 */
async function testBandwidth() {
  console.log('ƒêang k·∫øt n·ªëi ƒë·∫øn thi·∫øt b·ªã MikroTik...');
  
  try {
    console.log(`K·∫øt n·ªëi ƒë·∫øn ${host}:${port} v·ªõi user ${username}...`);
    
    const api = new RouterOSAPI({
      host,
      port,
      user: username,
      password,
      timeout: 10000,
    });

    await api.connect();
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!');
    
    // L·∫•y danh s√°ch interface
    printSection('Network Interfaces');
    const interfaces = await api.write('/interface/print');
    console.log(`S·ªë l∆∞·ª£ng interfaces: ${interfaces.length}`);
    
    // L·ªçc c√°c interface ƒëang ho·∫°t ƒë·ªông
    const activeInterfaces = interfaces.filter(iface => 
      iface.running === 'true' && iface.type !== 'loopback'
    );
    
    if (activeInterfaces.length === 0) {
      console.log('Kh√¥ng c√≥ interface n√†o ƒëang ho·∫°t ƒë·ªông.');
      await api.close();
      return;
    }
    
    // Hi·ªÉn th·ªã th√¥ng tin interfaces
    activeInterfaces.forEach(iface => {
      const status = iface.running === 'true' ? 'üü¢' : 'üî¥';
      console.log(`${status} ${iface.name} (${iface.type || 'unknown'})`);
      console.log(`  MAC: ${iface['mac-address'] || 'N/A'}, MTU: ${iface.mtu || 'default'}`);
      if (iface.disabled === 'true') {
        console.log(`  [Disabled]`);
      }
    });
    
    // Gi√°m s√°t bƒÉng th√¥ng trong 10 gi√¢y
    printSection('Bandwidth Monitoring (10 seconds)');
    console.log('ƒêang thu th·∫≠p d·ªØ li·ªáu bƒÉng th√¥ng...');
    
    // L∆∞u d·ªØ li·ªáu ban ƒë·∫ßu
    const interfaceData = {};
    for (const iface of activeInterfaces) {
      // L·∫•y d·ªØ li·ªáu traffic ban ƒë·∫ßu
      const initialTraffic = await api.write('/interface/monitor-traffic', [
        `=interface=${iface.name}`,
        '=once='
      ]);
      
      if (!initialTraffic || initialTraffic.length === 0) {
        console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu traffic cho ${iface.name}`);
        continue;
      }
      
      const firstSample = initialTraffic[0];
      
      // L·∫•y th·ªëng k√™ interface
      const stats = await api.write('/interface/print', [
        `=.proplist=name,rx-byte,tx-byte,rx-packet,tx-packet,rx-error,tx-error,rx-drop,tx-drop`,
        `?name=${iface.name}`
      ]);
      
      interfaceData[iface.name] = {
        firstSample,
        stats: stats[0] || {},
        samples: [
          {
            timestamp: Date.now(),
            rxBits: parseInt(firstSample['rx-bits-per-second'] || 0),
            txBits: parseInt(firstSample['tx-bits-per-second'] || 0)
          }
        ]
      };
    }
    
    // Thu th·∫≠p m·∫´u trong 10 gi√¢y, m·ªói gi√¢y l·∫•y 1 m·∫´u
    for (let i = 0; i < 10; i++) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      for (const iface of activeInterfaces) {
        if (!interfaceData[iface.name]) continue;
        
        const traffic = await api.write('/interface/monitor-traffic', [
          `=interface=${iface.name}`,
          '=once='
        ]);
        
        if (!traffic || traffic.length === 0) continue;
        
        const sample = traffic[0];
        interfaceData[iface.name].samples.push({
          timestamp: Date.now(),
          rxBits: parseInt(sample['rx-bits-per-second'] || 0),
          txBits: parseInt(sample['tx-bits-per-second'] || 0)
        });
        
        // Hi·ªÉn th·ªã d·ªØ li·ªáu theo th·ªùi gian th·ª±c
        process.stdout.write(`${iface.name}: RX ${formatBitrate(parseInt(sample['rx-bits-per-second'] || 0))}, TX ${formatBitrate(parseInt(sample['tx-bits-per-second'] || 0))}${i < 9 ? '... ' : '\\r\\n'}`);
      }
      
      // Xu·ªëng d√≤ng sau m·ªói l·∫ßn c·∫≠p nh·∫≠t
      console.log();
    }
    
    // Hi·ªÉn th·ªã b√°o c√°o t·ªïng h·ª£p
    printSection('Bandwidth Summary');
    
    for (const ifaceName in interfaceData) {
      const data = interfaceData[ifaceName];
      const samples = data.samples;
      
      if (samples.length < 2) {
        console.log(`${ifaceName}: Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch`);
        continue;
      }
      
      // T√≠nh to√°n d·ªØ li·ªáu t·ªïng h·ª£p
      let maxRx = 0, maxTx = 0, totalRx = 0, totalTx = 0;
      
      for (let i = 1; i < samples.length; i++) {
        const rxBits = samples[i].rxBits;
        const txBits = samples[i].txBits;
        
        maxRx = Math.max(maxRx, rxBits);
        maxTx = Math.max(maxTx, txBits);
        totalRx += rxBits;
        totalTx += txBits;
      }
      
      const avgRx = totalRx / (samples.length - 1);
      const avgTx = totalTx / (samples.length - 1);
      
      // Hi·ªÉn th·ªã d·ªØ li·ªáu t·ªïng h·ª£p
      console.log(`\nInterface: ${ifaceName}`);
      console.log(`Average Download: ${formatBitrate(avgRx)}`);
      console.log(`Average Upload:   ${formatBitrate(avgTx)}`);
      console.log(`Peak Download:    ${formatBitrate(maxRx)}`);
      console.log(`Peak Upload:      ${formatBitrate(maxTx)}`);
      
      // Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
      console.log(`\nDownload: ${createGraph(avgRx, maxRx)} (Avg/Peak)`);
      console.log(`Upload:   ${createGraph(avgTx, maxTx)} (Avg/Peak)`);
      
      // Hi·ªÉn th·ªã th·ªëng k√™ byte total
      if (data.stats) {
        const stats = data.stats;
        console.log(`\nTotal RX: ${formatBytes(parseInt(stats['rx-byte'] || 0))}`);
        console.log(`Total TX: ${formatBytes(parseInt(stats['tx-byte'] || 0))}`);
        console.log(`Packets RX/TX: ${stats['rx-packet'] || 0} / ${stats['tx-packet'] || 0}`);
        
        const rxErrors = parseInt(stats['rx-error'] || 0);
        const txErrors = parseInt(stats['tx-error'] || 0);
        const rxDrops = parseInt(stats['rx-drop'] || 0);
        const txDrops = parseInt(stats['tx-drop'] || 0);
        
        if (rxErrors > 0 || txErrors > 0 || rxDrops > 0 || txDrops > 0) {
          console.log(`Errors RX/TX: ${rxErrors} / ${txErrors}`);
          console.log(`Drops RX/TX: ${rxDrops} / ${txDrops}`);
        }
      }
    }
    
    await api.close();
    console.log('\n‚úÖ Ki·ªÉm tra ho√†n t·∫•t. ƒê√£ ng·∫Øt k·∫øt n·ªëi.');
    
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
    process.exit(1);
  }
}

// Th·ª±c thi ki·ªÉm tra
testBandwidth();